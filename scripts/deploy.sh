#!/bin/bash

# Teleflix - Script de d√©ploiement rapide
# Usage: ./scripts/deploy.sh [CONFIG_FILE] [NAMESPACE]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration par d√©faut
CONFIG_FILE=${1:-"config.yaml"}
NAMESPACE=${2:-"teleflix"}
MANIFESTS_DIR="./manifests"

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Banner
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë           üé¨ TELEFLIX                ‚ïë"
echo "‚ïë    D√©ploiement Kubernetes Stack      ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# V√©rification des pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier kubectl
if ! command -v kubectl &> /dev/null; then
    log_error "kubectl n'est pas install√©"
    exit 1
fi

# V√©rifier la connexion au cluster
if ! kubectl cluster-info &> /dev/null; then
    log_error "Impossible de se connecter au cluster Kubernetes"
    exit 1
fi

log_success "kubectl configur√© et cluster accessible"

# V√©rifier si le binaire existe
if [ ! -f "./bin/teleflix" ]; then
    log_info "Compilation du binaire..."
    make build
fi

log_success "Binaire teleflix pr√™t"

# V√©rifier le fichier de configuration
if [ ! -f "$CONFIG_FILE" ]; then
    log_warning "Fichier de configuration $CONFIG_FILE non trouv√©, utilisation de la config par d√©faut"
    CONFIG_FILE="config.yaml"
fi

log_info "Configuration: $CONFIG_FILE"
log_info "Namespace: $NAMESPACE"

# G√©n√©ration des manifests
log_info "G√©n√©ration des manifests Kubernetes..."
./bin/teleflix --config "$CONFIG_FILE" --namespace "$NAMESPACE" --output "$MANIFESTS_DIR"
log_success "Manifests g√©n√©r√©s dans $MANIFESTS_DIR"

# Affichage des manifests qui seront d√©ploy√©s
log_info "Manifests √† d√©ployer:"
for file in "$MANIFESTS_DIR"/*.yaml; do
    if [ -f "$file" ]; then
        echo "  - $(basename "$file")"
    fi
done

# Confirmation avant d√©ploiement
echo ""
read -p "Voulez-vous continuer le d√©ploiement ? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "D√©ploiement annul√©"
    exit 0
fi

# D√©ploiement
log_info "D√©ploiement en cours..."

# Cr√©er le namespace d'abord
kubectl apply -f "$MANIFESTS_DIR/00-namespace.yaml"
log_success "Namespace cr√©√©/mis √† jour"

# D√©ployer le storage
kubectl apply -f "$MANIFESTS_DIR/01-storage.yaml"
log_success "Stockage configur√©"

# Attendre que les PVC soient li√©s
log_info "Attente de la liaison des volumes..."
kubectl wait --for=condition=Bound pvc --all -n "$NAMESPACE" --timeout=120s || log_warning "Certains PVC ne sont pas encore li√©s"

# D√©ployer les services
for file in "$MANIFESTS_DIR"/*.yaml; do
    filename=$(basename "$file")
    if [[ "$filename" != "00-namespace.yaml" && "$filename" != "01-storage.yaml" && "$filename" != "99-ingress.yaml" ]]; then
        log_info "D√©ploiement de $filename..."
        kubectl apply -f "$file"
    fi
done

# Attendre que les pods soient pr√™ts
log_info "Attente du d√©marrage des pods..."
kubectl wait --for=condition=ready pod --all -n "$NAMESPACE" --timeout=300s || log_warning "Certains pods mettent plus de temps √† d√©marrer"

# D√©ployer l'ingress en dernier
if [ -f "$MANIFESTS_DIR/99-ingress.yaml" ]; then
    log_info "Configuration de l'ingress..."
    kubectl apply -f "$MANIFESTS_DIR/99-ingress.yaml"
    log_success "Ingress configur√©"
fi

# Affichage du statut final
log_success "D√©ploiement termin√© !"
echo ""
log_info "Statut des services:"
kubectl get pods,svc,pvc,ingress -n "$NAMESPACE"

echo ""
log_info "Acc√®s aux services:"

# R√©cup√©rer les informations d'acc√®s
DOMAIN=$(grep "domain:" "$CONFIG_FILE" | awk '{print $2}' || echo "teleflix.local")

echo "  üé¨ Jellyfin:    https://jellyfin.$DOMAIN"
echo "  üì∫ Sonarr:      https://sonarr.$DOMAIN"
echo "  üé≠ Radarr:      https://radarr.$DOMAIN"
echo "  üîç Jackett:     https://jackett.$DOMAIN"
echo "  üì• qBittorrent: https://qbittorrent.$DOMAIN"

echo ""
log_info "Pour l'acc√®s local (port-forward):"
echo "  make port-forward SERVICE=jellyfin PORT=8096"
echo "  make port-forward SERVICE=sonarr PORT=8989"
echo "  make port-forward SERVICE=radarr PORT=7878"
echo "  make port-forward SERVICE=jackett PORT=9117"
echo "  make port-forward SERVICE=qbittorrent PORT=8080"

echo ""
log_info "Pour voir les logs:"
echo "  make logs SERVICE=jellyfin"

echo ""
log_success "üéâ Teleflix est maintenant d√©ploy√© et pr√™t √† l'emploi !"

# Nettoyage optionnel
read -p "Voulez-vous supprimer les manifests g√©n√©r√©s ? (y/N): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "$MANIFESTS_DIR"
    log_success "Manifests nettoy√©s"
fi